# Create a revised version of the uploaded schedule-view.html with improvements:
# - Handles Google Calendar pagination (nextPageToken)
# - Adds ?timeZone=America/New_York to API requests and formats all times in ET explicitly
# - Supports all-day events (date) in addition to timed events (dateTime)
# - Adds a "Today" button and keyboard navigation (← → for months, T for today)
# - Improves "more events" handling with a click to open a day modal listing all events
# - Adds basic accessibility attributes and ARIA roles
# - Adds graceful fallback when a calendar fetch fails (continues others)
# - Adds optional query param ?month=YYYY-MM (deep link to a month)
# - Keeps user's legend colors and categories, but centralizes mapping
# - Minor CSS tweaks for readability on dense days
#
# The file will be saved as /mnt/data/schedule-view-fixed.html

from textwrap import dedent

html = dedent("""\
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TSL Calendar - Monthly View (Improved)</title>
  <meta name="description" content="Monthly calendar view for Time & Space Limited staff" />
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #f8f9fa; color: #2c3e50; line-height: 1.4; padding: 20px;
    }
    .container { max-width: 1200px; margin: 0 auto; }
    .header {
      background: white; border-radius: 12px; padding: 20px; margin-bottom: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: flex; justify-content: space-between;
      align-items: center; flex-wrap: wrap; gap: 15px;
    }
    .header-left { display: flex; align-items: center; gap: 15px; }
    .header h1 { font-size: 28px; color: #2c3e50; }
    .controls { display: flex; align-items: center; gap: 10px; }
    .week-start-toggle { display: flex; align-items: center; gap: 8px; font-size: 14px; color: #7f8c8d; }
    .toggle-switch { position: relative; width: 50px; height: 24px; background: #bdc3c7; border-radius: 12px; cursor: pointer; transition: background .3s; }
    .toggle-switch.active { background: #3498db; }
    .toggle-slider { position: absolute; top: 2px; left: 2px; width: 20px; height: 20px; background: white; border-radius: 50%; transition: transform .3s; }
    .toggle-switch.active .toggle-slider { transform: translateX(26px); }
    .month-nav { display: flex; align-items: center; gap: 10px; }
    .nav-btn {
      background: #3498db; color: white; border: none; border-radius: 8px; padding: 10px 12px;
      cursor: pointer; font-size: 14px; transition: background .2s;
    }
    .nav-btn:hover { background: #2980b9; }
    .current-month { font-size: 24px; font-weight: 600; color: #2c3e50; min-width: 200px; text-align: center; }
    .last-updated { font-size: 12px; color: #95a5a6; text-align: right; }
    .calendar-container { background: white; border-radius: 12px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); overflow: hidden; }
    .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); }
    .calendar-header { background: #34495e; color: white; padding: 15px 5px; text-align: center; font-weight: 600; font-size: 14px; }
    .calendar-day {
      min-height: 130px; border: 1px solid #ecf0f1; position: relative; background: white;
      display: flex; flex-direction: column;
    }
    .calendar-day.other-month { background: #f8f9fa; color: #bdc3c7; }
    .calendar-day.today { background: #fef5e7; border-color: #f39c12; }
    .calendar-day.weekend { background: #f8f9fa; }
    .day-number { padding: 8px; font-weight: 600; font-size: 14px; text-align: right; }
    .day-events { flex: 1; padding: 0 4px 4px 4px; overflow: hidden; }
    .event-item {
      background: #3498db; color: white; font-size: 12px; padding: 2px 4px; margin-bottom: 2px; border-radius: 3px;
      overflow: hidden; text-overflow: ellipsis; white-space: nowrap; cursor: pointer; transition: opacity .15s ease;
    }
    .event-item:hover { opacity: .9; }
    .event-item.theater-1 { background: #95a5a6; }
    .event-item.theater-2 { background: #27ae60; }
    .event-item.events { background: #e74c3c; }
    .event-item.non-public { background: #f39c12; }
    .event-item.tbd { background: #3498db; }
    .all-day { border: 1px dashed rgba(0,0,0,.2); background: #ecf0f1; color: #2c3e50; }
    .more-events { font-size: 10px; color: #7f8c8d; text-align: center; padding: 2px; font-style: italic; cursor: pointer; }
    .loading { text-align: center; padding: 40px; font-size: 18px; color: #7f8c8d; }
    .error-message {
      background: #e74c3c; color: white; padding: 15px 20px; border-radius: 8px; margin-bottom: 20px; text-align: center;
    }
    .legend { display: flex; justify-content: center; gap: 20px; margin-top: 15px; flex-wrap: wrap; }
    .legend-item { display: flex; align-items: center; gap: 8px; font-size: 12px; }
    .legend-color { width: 12px; height: 12px; border-radius: 3px; }
    .refresh-btn {
      position: fixed; bottom: 20px; right: 20px; background: #3498db; color: white; border: none; border-radius: 50px;
      padding: 15px 20px; font-size: 14px; cursor: pointer; box-shadow: 0 4px 15px rgba(52,152,219,.3); transition: background .2s;
    }
    .refresh-btn:hover { background: #2980b9; }
    .modal { display: none; position: fixed; inset: 0; background: rgba(0,0,0,.5); z-index: 1000; }
    .modal-content { background: white; margin: 8% auto; padding: 20px; border-radius: 12px; width: 92%; max-width: 520px; position: relative; }
    .modal-close { position: absolute; top: 10px; right: 15px; font-size: 24px; cursor: pointer; color: #95a5a6; }
    .day-list { max-height: 60vh; overflow: auto; margin-top: 10px; }
    .day-list .event-row { padding: 8px 0; border-bottom: 1px solid #ecf0f1; font-size: 14px; }
    .pill { display: inline-block; padding: 2px 6px; border-radius: 999px; font-size: 11px; margin-left: 6px; background: #ecf0f1; }
    .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,1px,1px); border: 0; }
    @media (max-width: 768px) {
      body { padding: 10px; }
      .calendar-day { min-height: 90px; }
      .day-number { font-size: 12px; padding: 4px; }
      .event-item { font-size: 10px; }
      .current-month { font-size: 18px; min-width: auto; }
      .header { flex-direction: column; text-align: center; }
    }
  </style>
</head>
<body>
  <div class="container" aria-live="polite">
    <div class="header">
      <div class="header-left">
        <h1>TSL Calendar</h1>
        <div class="controls">
          <div class="week-start-toggle" aria-label="Toggle week start day">
            <span>Week starts:</span>
            <span id="weekStartLabel">Sunday</span>
            <div class="toggle-switch" id="weekStartToggle" role="switch" aria-checked="false" tabindex="0">
              <div class="toggle-slider"></div>
            </div>
          </div>
          <button class="nav-btn" id="todayBtn" title="Jump to current month (T)">Today</button>
        </div>
      </div>
      <div class="month-nav" role="group" aria-label="Month navigation">
        <button class="nav-btn" id="prevBtn" aria-label="Previous month">‹ Previous</button>
        <div class="current-month" id="currentMonth">Loading...</div>
        <button class="nav-btn" id="nextBtn" aria-label="Next month">Next ›</button>
      </div>
      <div class="last-updated" id="lastUpdated"></div>
    </div>

    <div id="errorContainer"></div>
    <div id="loadingMessage" class="loading">Loading calendar...</div>
    
    <div class="calendar-container" id="calendarContainer" style="display:none;">
      <div class="calendar-grid" id="calendarGrid" role="grid" aria-readonly="true">
        <!-- Headers and days will be dynamically generated -->
      </div>
    </div>

    <div class="legend" aria-label="Legend">
      <div class="legend-item"><div class="legend-color" style="background:#e74c3c;"></div><span>Main Events</span></div>
      <div class="legend-item"><div class="legend-color" style="background:#f39c12;"></div><span>Non-Public</span></div>
      <div class="legend-item"><div class="legend-color" style="background:#3498db;"></div><span>TBD</span></div>
      <div class="legend-item"><div class="legend-color" style="background:#95a5a6;"></div><span>Theater 1</span></div>
      <div class="legend-item"><div class="legend-color" style="background:#27ae60;"></div><span>Theater 2</span></div>
    </div>
  </div>

  <button class="refresh-btn" id="refreshBtn">Refresh</button>

  <!-- Event Details Modal -->
  <div id="eventModal" class="modal" role="dialog" aria-modal="true" aria-labelledby="modalTitle">
    <div class="modal-content">
      <span class="modal-close" id="modalClose" aria-label="Close">&times;</span>
      <div id="modalContent"></div>
    </div>
  </div>

  <!-- Day List Modal -->
  <div id="dayModal" class="modal" role="dialog" aria-modal="true" aria-labelledby="dayModalTitle">
    <div class="modal-content">
      <span class="modal-close" id="dayModalClose" aria-label="Close">&times;</span>
      <div id="dayModalContent"></div>
      <div class="day-list" id="dayList"></div>
    </div>
  </div>

  <script>
    // === Configuration (same calendars) ===
    const API_KEY = 'AIzaSyDzisAik43Rr1xTJXg2bHXNF_XRTjjZsh8';
    const TIME_ZONE = 'America/New_York'; // Force ET formatting + fetch scope

    const ALL_CALENDARS = {
      'events': '1ed95b09dcc5ea1a1e13267b6654eca3c892fc79c23e2e9edc1e271411967255@group.calendar.google.com',
      'non-public': '6b48156e2887ac486283a0d4a2f94b1d2ad4b1ac4dd7e19f2fc7e01dafe67700@group.calendar.google.com',
      'tbd': '7b77eba3cf2e9f4e0407d62c3acd2540170b31554d1698b71ea7eb3a11d58306@group.calendar.google.com',
      'theater-1': '007f10222d517076d028161a4cda7108e75444c18ef7ac0d79aee420313d1a7b@group.calendar.google.com',
      'theater-2': 'ed801a88ce91b43543ef4e87c34d1405a6e053c5254e55e2871f0d305ecc32c4@group.calendar.google.com'
    };

    const CATEGORY_LABELS = {
      'events': 'Main Events',
      'non-public': 'Non-Public Event',
      'tbd': 'TBD (Tentative)',
      'theater-1': 'Theater 1',
      'theater-2': 'Theater 2'
    };

    // === State ===
    let currentDate = new Date();
    let allEvents = [];
    let weekStartsMonday = localStorage.getItem('weekStartsMonday') === 'true';

    // Deep-link support: ?month=YYYY-MM
    (function applyDeepLinkMonth(){
      const params = new URLSearchParams(location.search);
      const m = params.get('month');
      if (m && /^\\d{4}-\\d{2}$/.test(m)) {
        const [y, mo] = m.split('-').map(Number);
        currentDate = new Date(y, mo - 1, 1);
      }
    })();

    function getMonthRange(year, month) {
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);

      const startDate = new Date(firstDay);
      if (weekStartsMonday) {
        const dow = firstDay.getDay();
        const fromMon = dow === 0 ? 6 : dow - 1;
        startDate.setDate(firstDay.getDate() - fromMon);
      } else {
        startDate.setDate(firstDay.getDate() - firstDay.getDay());
      }

      const endDate = new Date(lastDay);
      if (weekStartsMonday) {
        const dow = lastDay.getDay();
        const toSun = dow === 0 ? 0 : 7 - dow;
        endDate.setDate(lastDay.getDate() + toSun);
      } else {
        endDate.setDate(lastDay.getDate() + (6 - lastDay.getDay()));
      }
      return { start: startDate, end: endDate };
    }

    function fmtTime(date) {
      return new Intl.DateTimeFormat('en-US', { hour: 'numeric', minute: '2-digit', hour12: true, timeZone: TIME_ZONE }).format(date);
    }
    function fmtDateLong(date) {
      return new Intl.DateTimeFormat('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: TIME_ZONE }).format(date);
    }
    function isToday(d) {
      const now = new Date();
      return d.getFullYear() === now.getFullYear() && d.getMonth() === now.getMonth() && d.getDate() === now.getDate();
    }
    function isSameMonth(d, m, y) { return d.getMonth() === m && d.getFullYear() === y; }

    function setWeekStartUI() {
      const toggle = document.getElementById('weekStartToggle');
      const label = document.getElementById('weekStartLabel');
      toggle.classList.toggle('active', weekStartsMonday);
      toggle.setAttribute('aria-checked', weekStartsMonday ? 'true' : 'false');
      label.textContent = weekStartsMonday ? 'Monday' : 'Sunday';
    }

    function toggleWeekStart() {
      weekStartsMonday = !weekStartsMonday;
      localStorage.setItem('weekStartsMonday', String(weekStartsMonday));
      setWeekStartUI();
      renderCalendar();
    }

    function updateLastUpdated() {
      const el = document.getElementById('lastUpdated');
      el.textContent = `Updated: ${new Date().toLocaleString('en-US', { timeZone: TIME_ZONE })}`;
    }

    function showError(message) {
      const ec = document.getElementById('errorContainer');
      ec.innerHTML = `<div class="error-message">${message}<br><small>Please check your internet connection or try refreshing the page.</small></div>`;
    }

    async function fetchOneCalendar(calendarType, calendarId, timeMin, timeMax) {
      let events = [];
      let pageToken = null;
      try {
        do {
          const url = new URL(`https://www.googleapis.com/calendar/v3/calendars/${encodeURIComponent(calendarId)}/events`);
          url.searchParams.set('timeMin', timeMin);
          url.searchParams.set('timeMax', timeMax);
          url.searchParams.set('showDeleted', 'false');
          url.searchParams.set('singleEvents', 'true');
          url.searchParams.set('orderBy', 'startTime');
          url.searchParams.set('maxResults', '250');
          url.searchParams.set('timeZone', TIME_ZONE);
          if (pageToken) url.searchParams.set('pageToken', pageToken);
          url.searchParams.set('key', API_KEY);

          const res = await fetch(url.toString());
          if (!res.ok) throw new Error(`HTTP ${res.status}`);
          const data = await res.json();
          (data.items || []).forEach(item => {
            const hasDateTime = item.start && item.start.dateTime;
            const hasAllDay = item.start && item.start.date;
            if (!hasDateTime && !hasAllDay) return;

            // Convert to local Date objects for TZ formatting via Intl later
            let start, end, allDay = false;
            if (hasDateTime) {
              start = new Date(item.start.dateTime);
              end = new Date(item.end.dateTime);
            } else {
              // All-day: treat as midnight start; Google returns end as exclusive date for all-day
              allDay = true;
              start = new Date(item.start.date + 'T00:00:00');
              end = new Date(item.end.date + 'T00:00:00');
            }
            events.push({
              title: item.summary || 'Untitled Event',
              start, end, calendar: calendarType,
              description: item.description || '',
              allDay
            });
          });
          pageToken = data.nextPageToken || null;
        } while (pageToken);
      } catch (err) {
        console.warn(`Failed to fetch ${calendarType}:`, err);
        // Don't block the rest; return what we have
      }
      return events;
    }

    async function fetchCalendarEvents() {
      const y = currentDate.getFullYear();
      const m = currentDate.getMonth();
      const { start, end } = getMonthRange(y, m);

      const timeMin = start.toISOString();
      const timeMax = end.toISOString();

      allEvents = [];
      const promises = Object.entries(ALL_CALENDARS).map(([type, id]) => fetchOneCalendar(type, id, timeMin, timeMax));
      const results = await Promise.all(promises);
      results.forEach(arr => allEvents.push(...arr));
      allEvents.sort((a, b) => a.start - b.start);
    }

    function eventsOnDate(date) {
      // Compare local date (ET) boundaries for accurate grouping
      const y = date.getFullYear(), m = date.getMonth(), d = date.getDate();
      return allEvents.filter(ev => {
        const ds = new Date(ev.start);
        const de = new Date(ev.end);
        // If all-day, include the starting date (and multi-day span)
        if (ev.allDay) {
          // Treat as spanning midnight-to-midnight; include if target day is within [start, end-1]
          const dayStart = new Date(y, m, d, 0, 0, 0);
          const dayEnd = new Date(y, m, d, 23, 59, 59);
          return de > dayStart && ds <= dayEnd;
        } else {
          return ds.getFullYear() === y && ds.getMonth() === m && ds.getDate() === d;
        }
      });
    }

    function renderCalendar() {
      const y = currentDate.getFullYear();
      const m = currentDate.getMonth();
      const { start } = getMonthRange(y, m);

      const monthNames = ["January","February","March","April","May","June","July","August","September","October","November","December"];
      document.getElementById('currentMonth').textContent = `${monthNames[m]} ${y}`;

      const grid = document.getElementById('calendarGrid');
      grid.innerHTML = '';

      const dayHeaders = weekStartsMonday
        ? ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
        : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];

      dayHeaders.forEach(day => {
        const header = document.createElement('div');
        header.className = 'calendar-header';
        header.textContent = day;
        header.setAttribute('role', 'columnheader');
        grid.appendChild(header);
      });

      // 42 day cells (6 weeks)
      for (let i = 0; i < 42; i++) {
        const cellDate = new Date(start);
        cellDate.setDate(start.getDate() + i);

        const dayCell = document.createElement('div');
        dayCell.className = 'calendar-day';
        dayCell.setAttribute('role', 'gridcell');
        dayCell.setAttribute('aria-label', cellDate.toDateString());

        if (!isSameMonth(cellDate, m, y)) dayCell.classList.add('other-month');
        if (isToday(cellDate)) dayCell.classList.add('today');
        if (cellDate.getDay() === 0 || cellDate.getDay() === 6) dayCell.classList.add('weekend');

        const dayNumber = document.createElement('div');
        dayNumber.className = 'day-number';
        dayNumber.textContent = cellDate.getDate();
        dayCell.appendChild(dayNumber);

        const eventsContainer = document.createElement('div');
        eventsContainer.className = 'day-events';

        const dayEvents = eventsOnDate(cellDate);
        const maxEvents = 4;

        dayEvents.slice(0, maxEvents).forEach(ev => {
          const el = document.createElement('div');
          el.className = `event-item ${ev.calendar} ${ev.allDay ? 'all-day' : ''}`;
          el.textContent = ev.allDay ? `All day — ${ev.title}` : `${fmtTime(ev.start)} ${ev.title}`;
          el.title = ev.allDay ? `${ev.title} (All day)` : `${ev.title}\\n${fmtTime(ev.start)} - ${fmtTime(ev.end)}`;
          el.onclick = () => showEventDetails(ev);
          eventsContainer.appendChild(el);
        });

        if (dayEvents.length > maxEvents) {
          const more = document.createElement('div');
          more.className = 'more-events';
          more.textContent = `+${dayEvents.length - maxEvents} more`;
          more.onclick = () => showDayList(cellDate, dayEvents);
          eventsContainer.appendChild(more);
        }

        dayCell.appendChild(eventsContainer);
        grid.appendChild(dayCell);
      }
    }

    function showEventDetails(ev) {
      const modal = document.getElementById('eventModal');
      const content = document.getElementById('modalContent');

      const durationMin = Math.round((ev.end - ev.start) / 60000);
      const hours = Math.floor(durationMin / 60);
      const minutes = durationMin % 60;
      const durationStr = ev.allDay ? 'All day' : (hours > 0 ? (minutes > 0 ? `${hours}h ${minutes}m` : `${hours}h`) : `${minutes}m`);
      const calendarName = CATEGORY_LABELS[ev.calendar] || ev.calendar;

      content.innerHTML = `
        <h3 id="modalTitle">${ev.title}</h3>
        <p><strong>Date:</strong> ${fmtDateLong(ev.start)}</p>
        <p><strong>Time:</strong> ${ev.allDay ? 'All day' : `${fmtTime(ev.start)} - ${fmtTime(ev.end)}`}</p>
        <p><strong>Duration:</strong> ${durationStr}</p>
        <p><strong>Calendar:</strong> ${calendarName}</p>
        ${ev.description ? `<p><strong>Description:</strong> ${ev.description}</p>` : ''}
      `;
      modal.style.display = 'block';
    }

    function showDayList(date, events) {
      const modal = document.getElementById('dayModal');
      const title = document.getElementById('dayModalContent');
      const list = document.getElementById('dayList');
      title.innerHTML = `<h3 id="dayModalTitle">${fmtDateLong(date)}</h3>`;
      list.innerHTML = '';
      const sorted = [...events].sort((a,b) => a.start - b.start);
      sorted.forEach(ev => {
        const row = document.createElement('div');
        row.className = 'event-row';
        const badge = `<span class="pill">${CATEGORY_LABELS[ev.calendar] || ev.calendar}</span>`;
        row.innerHTML = ev.allDay
          ? `<strong>All day</strong> — ${ev.title} ${badge}`
          : `<strong>${fmtTime(ev.start)}</strong> — ${ev.title} ${badge}`;
        row.onclick = () => showEventDetails(ev);
        list.appendChild(row);
      });
      modal.style.display = 'block';
    }

    function closeModalById(id) {
      document.getElementById(id).style.display = 'none';
    }

    function changeMonth(delta) {
      currentDate.setMonth(currentDate.getMonth() + delta);
      loadCalendar();
    }

    async function loadCalendar() {
      const loading = document.getElementById('loadingMessage');
      const container = document.getElementById('calendarContainer');
      const errorContainer = document.getElementById('errorContainer');

      errorContainer.innerHTML = '';
      loading.style.display = 'block';
      container.style.display = 'none';

      try {
        await fetchCalendarEvents();
        renderCalendar();
        updateLastUpdated();
        loading.style.display = 'none';
        container.style.display = 'block';
      } catch (e) {
        console.error('Failed to load calendar:', e);
        loading.style.display = 'none';
        showError('Unable to load calendar data.');
      }
    }

    // === Event listeners ===
    window.addEventListener('load', () => {
      setWeekStartUI();
      // Toggle click + keyboard
      const toggle = document.getElementById('weekStartToggle');
      toggle.addEventListener('click', toggleWeekStart);
      toggle.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); toggleWeekStart(); } });

      document.getElementById('prevBtn').addEventListener('click', () => changeMonth(-1));
      document.getElementById('nextBtn').addEventListener('click', () => changeMonth(1));
      document.getElementById('todayBtn').addEventListener('click', () => { currentDate = new Date(); loadCalendar(); });
      document.getElementById('refreshBtn').addEventListener('click', loadCalendar);

      document.getElementById('modalClose').addEventListener('click', () => closeModalById('eventModal'));
      document.getElementById('dayModalClose').addEventListener('click', () => closeModalById('dayModal'));

      window.addEventListener('click', (evt) => {
        if (evt.target.id === 'eventModal') closeModalById('eventModal');
        if (evt.target.id === 'dayModal') closeModalById('dayModal');
      });

      // Keyboard: ← → to change months, 'T' for today
      window.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') changeMonth(-1);
        else if (e.key === 'ArrowRight') changeMonth(1);
        else if (e.key.toLowerCase() === 't') { currentDate = new Date(); loadCalendar(); }
      });

      // Auto-refresh every 15 minutes
      setInterval(loadCalendar, 15 * 60 * 1000);

      loadCalendar();
    });
  </script>
</body>
</html>
""")

path = "/mnt/data/schedule-view-fixed.html"
with open(path, "w", encoding="utf-8") as f:
    f.write(html)

path
